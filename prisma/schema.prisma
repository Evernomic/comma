generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserCategory {
  Investor
  Developer
  Designer
  Founder
  Freelancer
  Writer
  Other
}

model User {
  id                    String           @id @default(cuid())
  name                  String?
  username              String           @unique @default(cuid())
  title                 String?
  email                 String           @unique
  domain                String?          @unique
  emailVerified         DateTime?
  image                 String?
  category              UserCategory?
  location              String?
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @default(now()) @map("updated_at")
  about                 String?          @db.Text
  newsletter            Boolean          @default(false)
  newsletterCta         String?
  seoTitle              String?
  seoDescription        String?
  ogImage               String?
  lsId                  String?          @unique
  lsVariantId           String?
  lsCurrentPeriodEnd    DateTime?
  accounts              Account[]
  sessions              Session[]
  articles              Article[]
  projects              Project[]
  bookmarks             Bookmark[]
  pages                 Page[]
  subscribers           Subscriber[]
  collections           Collection[]
  workExperiences       WorkExperience[]
  password              String?
  showBranding          Boolean          @default(true)
  userDefaultTheme      String?
  sections              Json?
  navLinks              Json?
  links                 Json?
  showOnExplore         Boolean          @default(true)
  showCustomHomePage    Boolean          @default(false)
  showBottomNav         Boolean          @default(true)
  customHomePageContent String?
  beehiivKey            String?
  beehiivPublicationId  String?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model WorkExperience {
  id          String  @id @default(uuid())
  from        Int
  to          String
  title       String
  company     String?
  location    String?
  url         String?
  description String?
  user        User    @relation(fields: [userId], references: [id])
  userId      String
}

model Subscriber {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("subscribers")
}

model Article {
  id                   String    @id @default(cuid())
  title                String
  content              String?   @db.Text
  published            Boolean   @default(false)
  slug                 String    @default(cuid())
  views                Int       @default(0)
  lastNewsletterSentAt DateTime?
  seoTitle             String?
  seoDescription       String?
  ogImage              String?
  image                String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @map("updated_at")
  publishedAt          DateTime  @default(now())
  authorId             String
  canonicalURL         String?
  author               User      @relation(fields: [authorId], references: [id])
  tags                 String[]
  isPinned             Boolean   @default(false)

  @@unique([authorId, slug])
  @@map("articles")
}

model Project {
  id             String   @id @default(cuid())
  title          String
  content        String?  @db.Text
  published      Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  slug           String   @default(cuid())
  views          Int      @default(0)
  year           Int?
  description    String?
  url            String?
  seoTitle       String?
  seoDescription String?
  ogImage        String?
  image          String?
  password       String?
  authorId       String
  author         User     @relation(fields: [authorId], references: [id])
  isPinned       Boolean  @default(false)

  @@unique([authorId, slug])
  @@map("projects")
}

model Collection {
  id        String     @id @default(cuid())
  name      String
  authorId  String
  bookmarks Bookmark[]
  user      User       @relation(fields: [authorId], references: [id])

  @@map("collections")
}

model Bookmark {
  id           String      @id @default(cuid())
  title        String
  url          String
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @map("updated_at")
  authorId     String
  clicks       Int         @default(0)
  collectionId String?
  author       User        @relation(fields: [authorId], references: [id])
  collection   Collection? @relation(fields: [collectionId], references: [id])
  isPinned     Boolean     @default(false)

  @@map("bookmarks")
}

enum PageVisibility {
  visible
  unlisted
}

model Page {
  id             String         @id @default(cuid())
  title          String
  content        String?        @db.Text
  published      Boolean        @default(false)
  visibility     PageVisibility @default(visible)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @map("updated_at")
  slug           String         @default(cuid())
  seoTitle       String?
  seoDescription String?
  ogImage        String?
  password       String?
  authorId       String
  author         User           @relation(fields: [authorId], references: [id])

  @@unique([authorId, slug])
  @@map("pages")
}
